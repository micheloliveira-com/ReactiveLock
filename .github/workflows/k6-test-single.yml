name: k6 Test - Preview or Final

permissions:
  contents: read
  actions: read

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "Select run mode"
        required: true
        default: "final"
        type: choice
        options:
          - final
          - preview
      project:
        description: "Select run project"
        required: true
        default: "grpc"
        type: choice
        options:
          - grpc
          - redis
  workflow_call:
    inputs:
      mode:
        required: true
        type: string
      project:
        required: true
        type: string
jobs:
  k6-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        run_id: [1, 2, 3, 4, 5]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Download Environment
        run: |  

          # Set mode-specific variables
          if [ "${{ inputs.mode || github.event.inputs.mode }}" = "preview" ]; then
            echo "Downloading PREVIEW rinha.js"
            echo "K6_TEST_FILE=test/integration/k6-environment/integration-test/integration-test.js" >> $GITHUB_ENV
            echo "MAX_REQUESTS=550" >> $GITHUB_ENV
            echo "RESULTS_FILE=partial-results.json" >> $GITHUB_ENV
            echo "MODE=preview" >> $GITHUB_ENV
          else
            echo "Downloading FINAL rinha.js"
            echo "K6_TEST_FILE=test/integration/k6-environment/integration-test/final-integration-test.js" >> $GITHUB_ENV
            echo "MAX_REQUESTS=603" >> $GITHUB_ENV
            echo "RESULTS_FILE=final-results.json" >> $GITHUB_ENV
            echo "MODE=final" >> $GITHUB_ENV
          fi

          # Set project folder variable
          if [ "${{ inputs.project || github.event.inputs.project }}" = "grpc" ]; then
            echo "PROJECT_FOLDER=test/integration/dotnet-csharp-grpc/src" >> $GITHUB_ENV
            echo "PROJECT=grpc" >> $GITHUB_ENV
          elif [ "${{ inputs.project || github.event.inputs.project }}" = "redis" ]; then
            echo "PROJECT_FOLDER=test/integration/dotnet-csharp-redis/src" >> $GITHUB_ENV
            echo "PROJECT=redis" >> $GITHUB_ENV
          else
            echo "PROJECT_FOLDER=src" >> $GITHUB_ENV
          fi

      - name: Download built nupkgs
        uses: actions/download-artifact@v5
        with:
          name: built-nupkgs
          path: ${{ env.PROJECT_FOLDER }}/nupkgs

      - name: Build and start services
        run: docker-compose -f test/integration/k6-environment/payment-processor/docker-compose.yml up -d

      - name: Build and start services
        run: cd $PROJECT_FOLDER && docker-compose up -d --build
        
      - name: Wait for nginx to be healthy (5 successes)
        run: |
          SUCCESS_COUNT=0
          ATTEMPTS=0

          while [ $ATTEMPTS -lt 60 ]; do
            ATTEMPTS=$((ATTEMPTS+1))
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:9999/payments-summary || true)

            if [ "$STATUS" -eq 200 ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT+1))
              echo "Success $SUCCESS_COUNT/5 (HTTP 200)"
              if [ $SUCCESS_COUNT -ge 5 ]; then
                echo "ok, nginx is up (5 consecutive HTTP 200s)"
                exit 0
              fi
            else
              echo "Waiting for nginx... attempt $ATTEMPTS/60 (last status: $STATUS)"
              SUCCESS_COUNT=0 # reset if it fails
            fi

            sleep 2
          done

          echo "bad, nginx did not become healthy in time"
          exit 1

      - uses: grafana/setup-k6-action@v1

      - name: Run k6 test
        run: k6 -q -e MAX_REQUESTS=${MAX_REQUESTS} run ${K6_TEST_FILE}

      - name: Upload JSON Results
        uses: actions/upload-artifact@v4
        with:
          name: results-json-${{ env.MODE }}-${{ env.PROJECT }}-${{ matrix.run_id }}
          path: ${{ env.RESULTS_FILE }}
          retention-days: 1
          
      - name: Create Comment MD File
        run: |
          echo "## k6 Test Results" > comment.md
          echo "Hash: ${{ github.sha }}" >> comment.md
          echo "\`\`\`json" >> comment.md
          cat ${RESULTS_FILE} >> comment.md
          echo "\n\`\`\`" >> comment.md

      - name: Append Docker Compose Logs
        run: |
          echo "## Docker Compose Logs" >> comment.md
          echo '```log' >> comment.md
          cd $PROJECT_FOLDER && docker-compose logs >> ../comment.md || true
          echo '```' >> comment.md

      - name: Echo comment.md contents
        run: cat comment.md

      - name: Upload comment.md as artifact
        uses: actions/upload-artifact@v4
        with:
            name: comment-md-${{ env.MODE }}-${{ env.PROJECT }}-${{ matrix.run_id }}
            path: comment.md
            retention-days: 1

  run-checks:
    if: ${{ inputs.project != '' }}
    needs: k6-test
    uses: ./.github/workflows/k6-test-checks.yml