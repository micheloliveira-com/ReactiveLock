name: SonarQube

permissions:
  contents: read
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
env:
  SOLUTION_DIR: 'src'

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Install .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet tool install --global coverlet.console
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd "${SOLUTION_DIR}"

          dotnet-sonarscanner begin \
            /k:"micheloliveira-com_ReactiveLock" \
            /o:"micheloliveira-com" \
            /d:sonar.token="${SONAR_TOKEN}" \
            /d:sonar.host.url="https://sonarcloud.io"
          
          dotnet build
          
          # Find first folder ending with .Tests (case-insensitive)
          test_project_dir=$(find . -type d -iname '*.tests' | head -n 1)
          if [ -z "$test_project_dir" ]; then
            echo "No test project folder found!"
            exit 1
          fi
          echo "Found test project folder: $test_project_dir"

          # Find first DLL inside bin folder of that test project
          dll_path=$(find "$test_project_dir/bin" -type f -name "*.dll" | head -n 1)
          if [ -z "$dll_path" ]; then
            echo "No DLL found inside $test_project_dir/bin!"
            exit 1
          fi
          echo "Found test DLL: $dll_path"

          coverlet "$dll_path" \
              --target "dotnet" \
              --targetargs "test --no-build" \
              -f=opencover \
              -o="coverage.xml"
              
          dotnet-sonarscanner end /d:sonar.token="${SONAR_TOKEN}"
