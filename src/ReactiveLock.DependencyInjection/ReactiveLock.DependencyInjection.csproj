<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);IncludeProjectReferencesWithPrivateAssetsAttributeInPackage</TargetsForTfmSpecificBuildOutput>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);IncludeReferenceAssemblies</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.DependencyInjection.Abstractions" Version="9.0.7" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="../ReactiveLock.Core/ReactiveLock.Core.csproj" PrivateAssets="all" />
  </ItemGroup>

  <!-- Add ProjectReferences output which are flagged as PrivateAssets="all" into the package. -->
  <Target Name="IncludeProjectReferencesWithPrivateAssetsAttributeInPackage"
          Condition="'@(ProjectReference)' != '' and @(ProjectReference->AnyHaveMetadataValue('PrivateAssets', 'all'))"
          DependsOnTargets="BuildOnlySettings;ResolveReferences">
    <ItemGroup>
      <_projectReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')->WithMetadataValue('PrivateAssets', 'all'))" />

      <BuildOutputInPackage Include="@(_projectReferenceCopyLocalPaths)"
                            TargetPath="%(_projectReferenceCopyLocalPaths.DestinationSubDirectory)" />
      <TfmSpecificDebugSymbolsFile Include="@(_projectReferenceCopyLocalPaths->WithMetadataValue('Extension', '.pdb'))"
                                   TargetPath="%(_projectReferenceCopyLocalPaths.DestinationSubDirectory)"
                                   TargetFramework="$(TargetFramework)"
                                   Condition="'$(IncludeSymbols)' == 'true'" />

      <!-- Remove symbol from the non symbol package. -->
      <BuildOutputInPackage Remove="@(_projectReferenceCopyLocalPaths->WithMetadataValue('Extension', '.pdb'))" />
      <BuildOutputInPackage Remove="@(_projectReferenceCopyLocalPaths->WithMetadataValue('Extension', '.xml'))" />
    </ItemGroup>
  </Target>

  <!-- Add a ref folder to the package which only exposes the library (and its documentation file) so that the
       referenced class library doesn't get exposed. -->
  <Target Name="IncludeReferenceAssemblies">
    <ItemGroup>
      <TfmSpecificPackageFile Include="$(TargetRefPath)" PackagePath="ref/$(TargetFramework)" />
      <TfmSpecificPackageFile Include="$(DocumentationFile)" PackagePath="ref/$(TargetFramework)" Condition="'$(GenerateDocumentationFile)' == 'true'" />
    </ItemGroup>
  </Target>

</Project>
